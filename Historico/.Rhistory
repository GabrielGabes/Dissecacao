indices <- seq_len(ncol(tabela))
# Altera a sequência para colocar a coluna -3 na posição 2
indices <- c(indices[1], indices[length(indices)-2], indices[2:(length(indices)-3)], indices[(length(indices)-1):length(indices)])
# Reordena as colunas do dataframe de acordo com a sequência
tabela = tabela[, indices]
tabela = tabela[-nrow(tabela), ] #excluindo ultima linha
tabela[["Variable"]][1] = var_x
# Ultimos Ajustes
colnames(tabela)[colnames(tabela) == 'Total'] <- 'Orevall'
tabela[] <- lapply(tabela, function(x) gsub("%", "", x))
tabela[] <- lapply(tabela, function(x) gsub("  ", " ", x))
return(tabela)
}
# Exemplo
#conti(df, "Resíduo gástrico", "sintomas_gabriel")
######################################################################
normalidade_por_grupo_criterio = function(col_num, col_cat){
if (any(table(df[[col_cat]]) < 3)){FALSE}
else{
if (any(byf.shapiro(df[[col_num]]~df[[col_cat]])$tab$`p-value` < 0.05)){FALSE}
else{TRUE}}}
#EXEMPLO:
##################################
summary_numerico_por_grupo_parametrico <- function(col_num, col_cat){
# Sumário por grupo
sumario_grupo <- df %>%
filter(!is.na(.data[[col_num]]), !is.na(.data[[col_cat]])) %>%
group_by(.data[[col_cat]]) %>%
summarise(
resumo = paste0(
sprintf("%.2f", round(median(.data[[col_num]], na.rm = TRUE), 2)),
" ± ", sprintf("%.2f", round(as.numeric(sd(.data[[col_num]], na.rm = TRUE)), 2))
)
)
sumario_grupo <- rename(sumario_grupo, "coluna" = col_cat)
# Sumário geral (total)
sumario_geral <- df %>%
filter(!is.na(.data[[col_num]]), !is.na(.data[[col_cat]])) %>%
summarise(
coluna = 'Total',
resumo = paste0(
sprintf("%.2f", round(median(.data[[col_num]], na.rm = TRUE), 2)),
" ± ", sprintf("%.2f", round(as.numeric(sd(.data[[col_num]], na.rm = TRUE)), 2))
)
)
sumario_final <- rbind(sumario_geral, sumario_grupo) # Combinar os sumários
tabela <- as.data.frame(t(sumario_final)) # Transpor o dataframe
colnames(tabela) <- tabela[1, ] # Ajustar os nomes das colunas
tabela <- tabela[-1, ]  # Remover a primeira linha
rownames(tabela)[1] <- col_num
tabela[["P-value"]] = NA
tabela[["teste_usado"]] = NA
if ( length(levels(as.factor(df[[col_cat]]))) <= 2 ){
pvalor = retorne_p(t.test(df[[col_num]]~df[[col_cat]])$p.value)
tabela[["teste_usado"]][1] = "T Test"
}
else {
pvalor = summary(aov(df[[col_num]]~df[[col_cat]]))[[1]][["Pr(>F)"]][1]
pvalor = retorne_p(pvalor)
tabela[["teste_usado"]][1] = "Anova"
}
tabela[["P-value"]] = pvalor
tabela[["Variable"]] = rownames(tabela)
rownames(tabela) = NULL
tabela = tabela[, c(ncol(tabela), 1:(ncol(tabela)-1))] #ultima coluna para primeira
colnames(tabela)[colnames(tabela) == 'Total'] <- 'Orevall'
return(tabela)
}
# Exemplo de uso:
#summary_numerico_por_grupo_parametrico("idade", "DM")
######################################################################
summary_numerico_por_grupo_n_parametrico <- function(col_num, col_cat){
# Sumário por grupo
sumario_grupo <- df %>%
filter(!is.na(.data[[col_num]]), !is.na(.data[[col_cat]])) %>%
group_by(.data[[col_cat]]) %>%
summarise(
resumo = paste0(
sprintf("%.2f", round(median(.data[[col_num]], na.rm = TRUE), 2)),
" [", sprintf("%.2f", round(as.numeric(quantile(.data[[col_num]], 0.25, na.rm = TRUE)), 2)),
" - ",
sprintf("%.2f", round(as.numeric(quantile(.data[[col_num]], 0.75, na.rm = TRUE)), 2)),"]"
)
)
sumario_grupo <- rename(sumario_grupo, "coluna" = col_cat)
# Sumário geral (total)
sumario_geral <- df %>%
filter(!is.na(.data[[col_num]]), !is.na(.data[[col_cat]])) %>%
summarise(
coluna = 'Total',
resumo = paste0(
sprintf("%.2f", round(median(.data[[col_num]], na.rm = TRUE), 2)),
" [", sprintf("%.2f", round(as.numeric(quantile(.data[[col_num]], 0.25, na.rm = TRUE)), 2)),
" - ",
sprintf("%.2f", round(as.numeric(quantile(.data[[col_num]], 0.75, na.rm = TRUE)), 2)),"]"
)
)
sumario_final <- rbind(sumario_geral, sumario_grupo) # Combinar os sumários
tabela <- as.data.frame(t(sumario_final)) # Transpor o dataframe
colnames(tabela) <- tabela[1, ] # Ajustar os nomes das colunas
tabela <- tabela[-1, ]  # Remover a primeira linha
rownames(tabela)[1] <- col_num
tabela[["P-value"]] = NA
tabela[["teste_usado"]] = NA
if (length(levels(as.factor(df[[col_cat]]))) > 2){
pvalor = retorne_p(kruskal.test(df[[col_num]]~df[[col_cat]])$p.value)
tabela[["teste_usado"]][1] = "Kruskal-Wallis"}
else{
pvalor = retorne_p(wilcox.test(df[[col_num]]~df[[col_cat]])$p.value)
tabela[["teste_usado"]][1] = "Mann-Whitney"}
tabela[["P-value"]] = pvalor
tabela[["Variable"]] = rownames(tabela)
rownames(tabela) = NULL
tabela = tabela[, c(ncol(tabela), 1:(ncol(tabela)-1))] #ultima coluna para primeira
colnames(tabela)[colnames(tabela) == 'Total'] <- 'Orevall'
return(tabela)
}
# Exemplo de uso:
#summary_numerico_por_grupo_n_parametrico("idade", "Metadona")
######################################################################
# Capturar medidas de modelo de Regressão Logistica
analise_mod = function(modelo){
estimadores = as.data.frame(summary(modelo)$coefficients)
odds = as.data.frame((exp(cbind(OR= coef(modelo), confint(modelo)))))
estimadores = apply_retorne_p(estimadores, "Pr(>|z|)")
estimadores = estimadores[, "Pr(>|z|)", drop = FALSE]
odds = odds[rowSums(is.na(odds)) != ncol(odds), ] # Apagando as linhas quando um dado estiver NA
odds = apply_rround(odds, "OR")
odds = apply_rround(odds, "2.5 %")
odds = apply_rround(odds, "97.5 %")
odds$ODDS = paste0(odds$OR, "(", odds$`2.5 %`, " - ", odds$`97.5 %`, ")")
odds <- odds[, "ODDS", drop = FALSE]
return(cbind(odds, estimadores))
}
# Versão antiga
analise_mod_antiga = function(modelo){
estimadores = as.data.frame(summary(modelo)$coefficients)
odds = as.data.frame((exp(cbind(OR= coef(modelo), confint(modelo)))))
return(cbind(odds, estimadores))
}
######################################################################
# Adicionar "\n" em frases muito longas
adicionar_quebra_de_linha <- function(frase, comprimento_maximo = 40) {
if (nchar(frase) > comprimento_maximo) {
palavras <- strsplit(frase, " ")[[1]]
frase_final <- ""
linha_atual <- ""
for (palavra in palavras) {
if (nchar(paste(linha_atual, palavra, sep = " ")) <= comprimento_maximo) {
linha_atual <- paste(linha_atual, palavra, sep = " ")
} else {
frase_final <- paste(frase_final, linha_atual, "\n", sep = "")
linha_atual <- palavra
}
}
frase_final <- paste(frase_final, linha_atual, sep = "")
return(frase_final)
} else {
return(frase)
}
}
#teste
frase_longa <- "Esta é uma frase muito longa que deve ser quebrada em várias linhas para melhor visualização."
adicionar_quebra_de_linha(frase_longa,50)
######################################################################
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan")
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan")
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan")
df <- read_excel("df.xlsx", sheet="Plan1")
df
df$Paciente = NULL
df
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan1")
df$Paciente = NULL
df$RGHC = NULL
df$Data = NULL
df$observação_sobre_margens = NULL
df$Paciente = NULL
df$complicação = NULL
df$observação = NULL
df
glimpse(df)
class(df$16_sem)
class(df$grupo)
class(df$complicacoes)
df$complicacoes
class(df$complicacoes)
df$complicacoes
df$n_dilatacoes
class(df$complicacoes)
length(df[[coluna]])
coluna
glimpse(df)
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "character"){
df[[coluna]] = as.character(df[[coluna]])
}
if (classe == "numeric"){
quantidade_niveis = length(class(df[[coluna]]))
if (quantidade_niveis <= 3){
df[[coluna]] = as.factor(df[[coluna]])
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
}
glimpse(df)
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan1")
df$Paciente = NULL
df$RGHC = NULL
df$Data = NULL
df$observação_sobre_margens = NULL
df$Paciente = NULL
df$complicação = NULL
df$observação = NULL
df
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "character"){
df[[coluna]] = as.factor(df[[coluna]])
}
if (classe == "numeric"){
quantidade_niveis = length(class(df[[coluna]]))
if (quantidade_niveis <= 3){
df[[coluna]] = as.factor(df[[coluna]])
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
}
glimpse(df)
quantidade_niveis
coluna
class(df[[coluna]])
levels(as.factor(df[[coluna]]))
length(levels(as.factor(df[[coluna]])))
quantidade_niveis
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "character"){
df[[coluna]] = as.factor(df[[coluna]])
}
if (classe == "numeric"){
quantidade_niveis = length(levels(as.factor(df[[coluna]])))
if (quantidade_niveis <= 3){
df[[coluna]] = as.factor(df[[coluna]])
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
}
glimpse(df)
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan1")
df$Paciente = NULL
df$RGHC = NULL
df$Data = NULL
df$observação_sobre_margens = NULL
df$Paciente = NULL
df$complicação = NULL
df$observação = NULL
df
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "character"){
df[[coluna]] = as.factor(df[[coluna]])
}
if (classe == "numeric"){
quantidade_niveis = length(levels(as.factor(df[[coluna]])))
if (quantidade_niveis <= 3){
df[[coluna]] = as.factor(df[[coluna]])
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
}
glimpse(df)
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan1")
df$Paciente = NULL
df$RGHC = NULL
df$Data = NULL
df$observação_sobre_margens = NULL
df$Paciente = NULL
df$complicação = NULL
df$observação = NULL
df
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "character"){
df[[coluna]] = as.factor(df[[coluna]])
}
if (classe == "numeric"){
quantidade_niveis = length(levels(as.factor(df[[coluna]])))
if (quantidade_niveis <= 3){
df[[coluna]] = as.factor(df[[coluna]])
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
glimpse(df)
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan1")
df$Paciente = NULL
df$RGHC = NULL
df$Data = NULL
df$observação_sobre_margens = NULL
df$Paciente = NULL
df$complicação = NULL
df$observação = NULL
df
glimpse(df)
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "character"){
df[[coluna]] = as.factor(df[[coluna]])
}
if (classe == "numeric"){
quantidade_niveis = length(levels(as.factor(df[[coluna]])))
if (quantidade_niveis <= 3){
df[[coluna]] = as.factor(df[[coluna]])
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
glimpse(df)
class(df$sexo)
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan1")
df$Paciente = NULL
df$RGHC = NULL
df$Data = NULL
df$observação_sobre_margens = NULL
df$Paciente = NULL
df$complicação = NULL
df$observação = NULL
df
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "character"){
df[[coluna]] = as.factor(df[[coluna]])
}
if (classe == "numeric"){
quantidade_niveis = length(levels(as.factor(df[[coluna]])))
if (quantidade_niveis <= 3){
df[[coluna]] = as.factor(df[[coluna]])
}
else {
df[[coluna]] = as.numeric(df[[coluna]])
}
}
}
class(df$sexo)
glimpse(df)
tabelona = summary_num_cat("idade", coluna_analisada)[FALSE, ]
tabelona = normalidade_por_grupo_criterio("idade", coluna_analisada)[FALSE, ]
tabelona = normalidade_por_grupo_criterio("idade", coluna_analisada)[FALSE, ]
coluna_analisada  = "Estenose"
tabelona = normalidade_por_grupo_criterio("idade", coluna_analisada)[FALSE, ]
df$Estenose
coluna_analisada  = "Estenose"
tabelona = normalidade_por_grupo_criterio("idade", coluna_analisada)[FALSE, ]
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "factor"){
print(coluna)
print(table(df[[coluna]]))
}
}
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "factor"){
print(coluna)
print(table(df[[coluna]]))
print("============================================")
}
}
coluna_analisada  = "Estenose"
tabelona = normalidade_por_grupo_criterio("idade", coluna_analisada)[FALSE, ]
normalidade_por_grupo_criterio("idade", coluna_analisada)[FALSE, ]
normalidade_por_grupo_criterio("idade", coluna_analisada)
coluna_analisada  = "Estenose"
tabelona = summary_numerico_por_grupo_n_parametrico("idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
coluna
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
coluna_analisada  = "Estenose"
tabelona = summary_numerico_por_grupo_n_parametrico("idade", coluna_analisada)[FALSE, ]
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
coluna
table(df$em_bloco, df$Estenose)
coluna_analisada  = "Estenose"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,
"em_bloco")))]
tabelona = summary_numerico_por_grupo_n_parametrico("idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
tabelona
df
df$Primário = NULL
coluna_analisada  = "Estenose"
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada,
"em_bloco")))]
tabelona = summary_numerico_por_grupo_n_parametrico("idade", coluna_analisada)[FALSE, ]
for (coluna in lista_coluna){
classe = class(df[[coluna]])
if (classe == "numeric"){
if (normalidade_por_grupo_criterio(coluna, coluna_analisada) == TRUE){
tabelinha = summary_numerico_por_grupo_parametrico(coluna, coluna_analisada)
}
else{
tabelinha = summary_numerico_por_grupo_n_parametrico(coluna, coluna_analisada)
}
tabelona = rbind(tabelona, tabelinha)
}
else{
tabelinha = conti(df, coluna_analisada, coluna)
tabelona = rbind(tabelona, tabelinha)
}
}
tabelona
setwd("C:/Users/ADM/OneDrive/Documentos/Dissecação")
df <- read_excel("df.xlsx", sheet="Plan1")
df$Paciente = NULL
df$RGHC = NULL
df$Data = NULL
df$observação_sobre_margens = NULL
df$Paciente = NULL
df$complicação = NULL
df$observação = NULL
df$Primário = NULL
df$n_dilatacoes = NULL
df
